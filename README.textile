h4. Posted 2008-12-04

h1. On Rake Stats

A quick note on test code ratios. I wonder how fair comparing lines of code to lines of test code really is. Take for example this code:

<pre>
  # -- in app/models/production.rb
  class ProductOption < ActiveRecord::Base
    before_save :set_option

    def set_option
      write_attribute(:option, "ProductOption")
    end
  end
  
  # -- in app/models/metal.rb
  class Metal < ProductOption
    def set_option
      write_attribute(:option, self.class.to_s)
    end
  end
  
  # -- in app/models/jewel.rb
  class Jewel < ProductOption
    def set_option
      write_attribute(:option, self.class.to_s)
    end
  end
  # -- etc... --
</pre>

Given the following schema:

<pre>
  create_table "product_options", :force => true do |t|
    t.string   "value"
    t.string   "option"
    # -- ... --
  end
</pre>

If you are an efficient coder you would probably write something like this:

<pre>
  require 'test_helper'

  class ProductOptionTest < ActiveSupport::TestCase
    def setup
      @product_option = ProductOption.create(
        :value  => "test",
        :option => "ProductOption"
      )
    end

    def test_should_have_option
      assert !@product_option.option.nil?, "option is probably nil: #{@product_option.option.nil?}"
      assert @product_option.option == "ProductOption", "option is not equal to ProductOption: #{@product_option.option}"
    end

    def test_inheriting_classes_should_set_option_to_their_class_name
      %w(Metal Jewel).each do |klass|
        product_option = eval(klass).send(:create)
        assert !product_option.option.nil?, "option is probably nil: #{@product_option.option.nil?}"
        assert product_option.option == "#{klass}", "option is not equal to #{klass}: #{product_option.option}"
      end
    end
  end
</pre>

Or even cleaner.

So here is the problem. The method test_inheriting_classes_should_set_option_to_their_class_name does a loop to check all the classes in question. So I'm running two tests and four assertions at this point, yet my test lines of code total for this method is 7, while the models being tested have a line of code count of 10 - a ratio of 1:0.7 . If I didn't loop there would be 12 lines of test code to 10 lines of real code - a ratio of 1:1.2 .

Now imagine I added more classes. This won't increase my test lines of code count a bit yet it would keep raising my real lines of code count. So it's not really a fair judge of tests in my book. Should I have to write a long list of tests that do essentially the same thing for an ever expanding list of possible new classes?

You could say that these classes are exactly similar and I could just write a loop for dynamic creation of them if I needed such a separation. And you'd be right. But what if they are not the same? What if the class Metal goes to include different finishes in it? Maybe different validation setups. There can be plenty of reasons that these would not be the same. So knocking down that straw man of my own creation, I still hold to my opinion that there has to be a better way of judging your testing level automatically.

Does anyone have any ideas? Please comment "on this commit":http://github.com/m3talsmith/blog/commit/fce565ab22c3bdb234d004b7c922ed9df92b07b5#comments with ideas.

h1. &nbsp;

h4. Posted by: "Michael Christenson II":http://workingwithrails.com/person/6829-michael-christenson-ii (aka m3talsmith)

<pre>
 site | http://blog.theurbanrebellion.com
 cell | +1(231)884-3024
email | michael@theurbanrebellion.com
</pre>
 
<a href="http://workingwithrails.com/recommendation/new/person/6829-michael-christenson-ii"><img alt="Recommend Me" src="http://workingwithrails.com/images/tools/compact-med.jpg" /></a>

<img src="http://profile.ak.facebook.com/v226/329/2/n536911325_2327.jpg" height="150px" width="200px" />